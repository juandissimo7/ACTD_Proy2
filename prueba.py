# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.tsa as tsm
import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec
from statsmodels.formula.api import ols
from scipy import stats
from astsadata import *
import matplotlib.pyplot as plt
df=pd.read_csv("NFLXR.csv")
#del df["Fecha"]
#print(df)
df_train= df[0:900]
#print(df_train)
df_try=df[900:]
#print(df_try)

def acf1(x, nlags=None, acf_type="correlation", pacf=False, ax=None, **kwargs):
    lags = np.arange(1, nlags + 1)

    if pacf:
        if acf_type == "correlation":
            values = sm.tsa.pacf(x, nlags=nlags)[1:]
            ylabel = "PACF"
    else:
        if acf_type == "correlation":
            values = sm.tsa.acf(x, nlags=nlags, fft=False)[1:]
            ylabel = "ACF"
        elif acf_type == "covariance":
            values = sm.tsa.acovf(x, nlag=nlags)[1:]
            ylabel = "ACoV"

    if ax is None:
        ax = plt.gca()
 
    ax.bar(lags, values, **kwargs)
    ax.axhline(0, color="black", linewidth=1)
    if acf_type == "correlation":
        conf_level = 1.96 / np.sqrt(x.shape[0])
        ax.axhline(conf_level, color="red", linestyle="--", linewidth=1)
        ax.axhline(-conf_level, color="red", linestyle="--", linewidth=1)
    ax.set_xlabel("LAG")
    ax.set_ylabel(ylabel)

    return ax

def grafico_ini():
    # Gr√°fico Inicial
    # Arrival phases from an earthquake (top) and explosion (bottom) at 40 points per second.
    # The recording instruments in Scandinavia are observing earthquakes and mining explosions
    # The general problem of interest is in distinguishing or discriminating between waveforms generated by earthquakes and those generated by explosions.
    df_train["NFLX"].plot(ylabel="Price",xlabel="Days since 01/01/2017", title="NFLX PRICE", legend=False)
    plt.show()
    return None
    
def AFCyPAFC():
    fig, axes = plt.subplots(nrows=2, figsize=(8, 7))

    acf1(df_train["NFLX"], nlags=48, ax=axes[0], width=.3)
    axes[0].set_title("ACF NFLX")

    #acf1(EQ5.diff().dropna(), nlags=48, ax=axes[1], width=.3)
    #axes[1].set_title("first difference")

    acf1(df_train["NFLX"],pacf = True, nlags=48,ax=axes[1], width=.3)
    axes[1].set_title("PAFC NFLX")
    fig.tight_layout()
    plt.show()
    return None

AFCyPAFC()


def prediction():
    regr = sm.tsa.AutoReg(df_train["NFLX"], lags=106).fit()
    fore = regr.get_prediction(start=len(df_train["NFLX"]), end=len(df_train["NFLX"]) + 106)

    df_train["NFLX"][500:].plot(xlabel="Days since 01/01/2017", ylabel="NFLX Price", legend=False)
    fore.predicted_mean.plot(marker="o")
    df["NFLX"][500:].plot()
    plt.plot(fore.predicted_mean + fore.se_mean, color="red", linestyle="--")
    plt.plot(fore.predicted_mean - fore.se_mean, color="red", linestyle="--")
    plt.show()
    return None

prediction()

